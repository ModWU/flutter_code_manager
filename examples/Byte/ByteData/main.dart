import 'dart:typed_data';
main() {
  //exam_1();
  exam_2();
}

exam_2() {
  //创建ByteData对象，里面可以保存8个字节，初始值为：0
  //数组中形式：[00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000]
  var data = new ByteData(8);
  
  //十进制数字"46200"的64位二进制表示为：00000000 ... 10110100 01111000
  //将这64位数据完整存到数组中
  //数组中的形式为：[00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 10110100, 01111000]
  data.setInt64(0, 46200);
  
  //得到完整的64位数，即by_1 = 46200
  var by_1 = data.getInt64(0);
  print("by_1: $by_1");
  
  //得到第7位的一个字节，即向后偏移6位
  //获取的字节为：10110100，该字节高位为1，转化为64位即前56位都补1，得：11111111 ... 10110100
  //再转化为十进制为：-76，by_2 = -76
  var by_2 = data.getInt8(6);
  print("by_2: $by_2");
  
  
  //得到第8位的一个字节，即向后偏移7位
  //获取的字节为：01111000，该字节高位为0，转化为64位即前56位都补0，得：00000000 ... 01111000
  //再转化为十进制为：120，by_3 = 120
  var by_3 = data.getInt8(7);
  print("by_3: $by_3");
  
  //向后偏移6位，得到一个16位的数为：10110100, 01111000
  //转化为无符号的64位int型数据为：00000000 .... 10110100 01111000
  //即：by_4 = 46200
  var by_4 = data.getUint16(6);
  print("by_4: $by_4");
  
}

exam_1() {
 //创建ByteData对象，里面可以保存2个字节，第一个和第二个字节都初始值为：0
  //数组中形式：[00000000, 00000000]
  var data = new ByteData(2);
  
  //第二个字节保存-8
  //-8是int类型，即64位补码形式：11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111000
  //转化为1个字节，只截取后8位，即：11111000
  //数组中形式：[00000000, 11111000]
  data.setInt8(1, -8);
  
  //得到第一个字节，by_1 = 0
  int by_1 = data.getUint8(0);
  print("by_1: $by_1");
  
  //得到第二个字节，by_2 = 11111000，因为是无符号的数，转化为64位的int为: 00000000 ... 11111000
  //再转化为十进制得: by_2 = 248
  int by_2 = data.getUint8(1);
  print("by_2: $by_2");
  
  //抛出异常，因为只剩一个字节可取，而需要取16个字节
  //int by_3 = data.getInt16(1);
  
  //取到的字节为: 00000000 11111000，转化为64位的int类型：00000000 ... 11111000
  //再转化为十进制得: by_3 = 248
  int by_3 = data.getInt16(0);
  print("by_3: $by_3");
  
  //取到的字节为：11111000，转化为64位的int类型：11111111 ... 11111000
  //之所以用1补齐前56位数，因为该8位数的第一位数是1，高位为1代表负数，所以用1补齐，
  //该数最终为：by_4 = -8;
  int by_4 = data.getInt8(1);
  print("by_4：$by_4");
  
  //elementSizeInBytes offsetInBytes lengthInBytes
  print("多少个字节：${data.buffer.lengthInBytes}");
  print("多少个字节：${data.lengthInBytes}");
  print("每个元素表示的字节数：${data.elementSizeInBytes}");
  print("在字节数组中的偏移量：${data.offsetInBytes}");
}